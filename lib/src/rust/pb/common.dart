// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// 账号类型
enum AccountType {
  /// 手机
  mobile,

  /// 邮箱
  email,
}

/// 联系人基本信息
class ContactsDetailBase {
  /// 用户基本信息
  final UserBase? userInfo;

  /// 描述
  final String depict;

  /// 星标
  final bool bfStar;

  /// 免打扰
  final bool bfDisturb;

  /// 我的黑名单用户
  final bool bfMyBlack;

  /// 昵称首字母
  final String letter;

  /// 置顶
  final bool bfTop;

  /// 是否需要申请验证(非联系人)
  final bool bfVerify;

  /// 个性签名
  final String signature;

  /// 群昵称（由群查看时下发） add v1.0.5
  final String groupNickName;

  /// 手机号 add v1.0.5
  final String phone;

  /// 阅后即焚 add v1.1.0
  final bool bfReadCancel;

  /// 消息销毁时间\[秒\]· add v1.1.0
  final int msgCancelTime;

  /// 截屏通知 add v1.1.0
  final bool bfScreenshot;

  /// 共同群聊数量 add v1.2.0
  final int commonGroupNum;

  /// 好友已读回执开关 v1.2.0
  final bool bfReadReceipt;

  /// 群成员禁言时间\[秒\]，关闭-1，永久-2，默认值0为不显示（由群查看时下发） v1.4.0 如：1小时：3600
  final int groupShutupTime;

  /// 好友搜索来源   0：手机号，1：扫码，2：群聊，3：名片，4：朋友申请信息，5：链接，6：68号
  final int searchType;

  /// 搜索陌生人时下发的令牌，添加好友时需要
  final String addToken;

  /// 是否显示68号
  final bool bfIdSearch;

  const ContactsDetailBase({
    this.userInfo,
    required this.depict,
    required this.bfStar,
    required this.bfDisturb,
    required this.bfMyBlack,
    required this.letter,
    required this.bfTop,
    required this.bfVerify,
    required this.signature,
    required this.groupNickName,
    required this.phone,
    required this.bfReadCancel,
    required this.msgCancelTime,
    required this.bfScreenshot,
    required this.commonGroupNum,
    required this.bfReadReceipt,
    required this.groupShutupTime,
    required this.searchType,
    required this.addToken,
    required this.bfIdSearch,
  });

  @override
  int get hashCode =>
      userInfo.hashCode ^
      depict.hashCode ^
      bfStar.hashCode ^
      bfDisturb.hashCode ^
      bfMyBlack.hashCode ^
      letter.hashCode ^
      bfTop.hashCode ^
      bfVerify.hashCode ^
      signature.hashCode ^
      groupNickName.hashCode ^
      phone.hashCode ^
      bfReadCancel.hashCode ^
      msgCancelTime.hashCode ^
      bfScreenshot.hashCode ^
      commonGroupNum.hashCode ^
      bfReadReceipt.hashCode ^
      groupShutupTime.hashCode ^
      searchType.hashCode ^
      addToken.hashCode ^
      bfIdSearch.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ContactsDetailBase &&
          runtimeType == other.runtimeType &&
          userInfo == other.userInfo &&
          depict == other.depict &&
          bfStar == other.bfStar &&
          bfDisturb == other.bfDisturb &&
          bfMyBlack == other.bfMyBlack &&
          letter == other.letter &&
          bfTop == other.bfTop &&
          bfVerify == other.bfVerify &&
          signature == other.signature &&
          groupNickName == other.groupNickName &&
          phone == other.phone &&
          bfReadCancel == other.bfReadCancel &&
          msgCancelTime == other.msgCancelTime &&
          bfScreenshot == other.bfScreenshot &&
          commonGroupNum == other.commonGroupNum &&
          bfReadReceipt == other.bfReadReceipt &&
          groupShutupTime == other.groupShutupTime &&
          searchType == other.searchType &&
          addToken == other.addToken &&
          bfIdSearch == other.bfIdSearch;
}

/// 好友关系信息
class FriendRelation {
  /// 是否好友\[此用户是否是当前登录用户的好友\]
  final bool bfFriend;

  /// 好友备注名OR群昵称
  final String remarkName;

  const FriendRelation({required this.bfFriend, required this.remarkName});

  @override
  int get hashCode => bfFriend.hashCode ^ remarkName.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is FriendRelation &&
          runtimeType == other.runtimeType &&
          bfFriend == other.bfFriend &&
          remarkName == other.remarkName;
}

/// 用户基本信息
class UserBase {
  /// 用户ID
  final PlatformInt64 uid;

  /// 昵称
  final String nickName;

  /// 头像
  final String icon;

  /// 性别
  final int gender;

  /// 好友关系
  final FriendRelation? friendRelation;

  /// 用户上下线
  final UserOnOrOffLine? userOnOrOffline;

  /// 个性签名(web)
  final String signature;

  /// 描述(web)
  final String depict;

  /// 是否已注销 v1.3.0
  final bool bfCancel;

  /// 是否已限制 v1.4.0
  final bool bfBanned;

  /// 68号 v1.4.0
  final String identify;

  /// 用户真实姓名
  final String realName;

  /// 身份证号
  final String idNumber;

  /// 注册时间戳
  final PlatformInt64 createTime;

  /// 0系统账号，1普通用户，2机器人，3商户红包号，4隐身号
  final int userType;

  const UserBase({
    required this.uid,
    required this.nickName,
    required this.icon,
    required this.gender,
    this.friendRelation,
    this.userOnOrOffline,
    required this.signature,
    required this.depict,
    required this.bfCancel,
    required this.bfBanned,
    required this.identify,
    required this.realName,
    required this.idNumber,
    required this.createTime,
    required this.userType,
  });

  @override
  int get hashCode =>
      uid.hashCode ^
      nickName.hashCode ^
      icon.hashCode ^
      gender.hashCode ^
      friendRelation.hashCode ^
      userOnOrOffline.hashCode ^
      signature.hashCode ^
      depict.hashCode ^
      bfCancel.hashCode ^
      bfBanned.hashCode ^
      identify.hashCode ^
      realName.hashCode ^
      idNumber.hashCode ^
      createTime.hashCode ^
      userType.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is UserBase &&
          runtimeType == other.runtimeType &&
          uid == other.uid &&
          nickName == other.nickName &&
          icon == other.icon &&
          gender == other.gender &&
          friendRelation == other.friendRelation &&
          userOnOrOffline == other.userOnOrOffline &&
          signature == other.signature &&
          depict == other.depict &&
          bfCancel == other.bfCancel &&
          bfBanned == other.bfBanned &&
          identify == other.identify &&
          realName == other.realName &&
          idNumber == other.idNumber &&
          createTime == other.createTime &&
          userType == other.userType;
}

/// 用户上下线
class UserOnOrOffLine {
  /// 上下线用户ID
  final PlatformInt64 uid;

  /// 上下线：true-上线，false-下线
  final bool online;

  /// 上下线时间
  final PlatformInt64 createTime;

  /// 是否显示
  final bool bfShow;

  const UserOnOrOffLine({
    required this.uid,
    required this.online,
    required this.createTime,
    required this.bfShow,
  });

  @override
  int get hashCode =>
      uid.hashCode ^ online.hashCode ^ createTime.hashCode ^ bfShow.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is UserOnOrOffLine &&
          runtimeType == other.runtimeType &&
          uid == other.uid &&
          online == other.online &&
          createTime == other.createTime &&
          bfShow == other.bfShow;
}
