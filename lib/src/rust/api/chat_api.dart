// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'model/conversation.dart';
import 'model/ffi_message_common.dart';
import 'model/ffi_message_content.dart';
import 'model/ffi_message_content_audio.dart';
import 'model/ffi_message_content_dice.dart';
import 'model/ffi_message_content_dynamic_image.dart';
import 'model/ffi_message_content_file.dart';
import 'model/ffi_message_content_game.dart';
import 'model/ffi_message_content_group_event.dart';
import 'model/ffi_message_content_html.dart';
import 'model/ffi_message_content_html2.dart';
import 'model/ffi_message_content_image.dart';
import 'model/ffi_message_content_location.dart';
import 'model/ffi_message_content_medias_caption.dart';
import 'model/ffi_message_content_name_card.dart';
import 'model/ffi_message_content_notice.dart';
import 'model/ffi_message_content_redpacket.dart';
import 'model/ffi_message_content_system.dart';
import 'model/ffi_message_content_text.dart';
import 'model/ffi_message_content_transfer.dart';
import 'model/ffi_message_content_unknown.dart';
import 'model/ffi_message_content_video.dart';
import 'model/ffi_message_model.dart';
import 'model/ffi_message_user.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These types are ignored because they are neither used by any `pub` functions nor (for structs and enums) marked `#[frb(unignore)]`: `MessageStatus`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `clone`, `clone`, `fmt`, `fmt`, `fmt`

/// 创建消息监听器，用于接收来自服务器的实时消息
///
/// 返回:
/// * `Stream<FfiConversationMessage>` - 消息流，Flutter 端可以通过该流接收新消息
Stream<Rust2ClientMessagePayload> listenForMessages() =>
    RustLib.instance.api.crateApiChatApiListenForMessages();

/// 发送消息到会话
///
/// # 参数
///
/// * `conversation_id` - 会话ID
/// * `conversation_type` - 会话类型，1：私聊，2：群聊
/// * `content` - 消息内容
/// * `message_type` - 消息类型，1：文本，2：图片，3：语音
///
Future<FfiMessageModel> sendMessage({
  required FfiChatType chatType,
  required PlatformInt64 targetId,
  required FfiMsgContent msgContent,
  FfiReferenceObj? refObj,
}) => RustLib.instance.api.crateApiChatApiSendMessage(
  chatType: chatType,
  targetId: targetId,
  msgContent: msgContent,
  refObj: refObj,
);

Future<FfiMessageModel> sendMessageWithJson({
  required FfiChatType chatType,
  required PlatformInt64 targetId,
  required FfiMsgType msgType,
  required String contentObj,
}) => RustLib.instance.api.crateApiChatApiSendMessageWithJson(
  chatType: chatType,
  targetId: targetId,
  msgType: msgType,
  contentObj: contentObj,
);

/// 获取聊天历史记录
///
/// # 参数
///
/// * `conversation_id` - 会话ID
/// * `limit` - 限制条数
/// * `before_id` - 指定消息ID，获取该消息之前的消息
///
Future<List<FfiMessageModel>> getChatHistory({
  required FfiChatType chatType,
  required PlatformInt64 targetId,
  required int limit,
  PlatformInt64? beforeId,
}) => RustLib.instance.api.crateApiChatApiGetChatHistory(
  chatType: chatType,
  targetId: targetId,
  limit: limit,
  beforeId: beforeId,
);

/// 获取会话列表
///
/// 返回:
/// * `Result<Vec<FfiConversation>>` - 会话列表
Future<List<FfiConversation>> getChatConversations() =>
    RustLib.instance.api.crateApiChatApiGetChatConversations();

/// 获取会话列表（包含归档分组）
///
/// 返回:
/// * `Result<Vec<FfiConversation>>` - 会话列表，包含归档分组标题
Future<List<FfiConversation>> getConversationsWithArchived() =>
    RustLib.instance.api.crateApiChatApiGetConversationsWithArchived();

/// 标记消息为已读
///
/// 参数:
/// * `msg_id` - 消息ID
///
/// 返回:
/// * `Result<()>` - 操作结果
Future<void> markMessageAsRead({required String msgId}) =>
    RustLib.instance.api.crateApiChatApiMarkMessageAsRead(msgId: msgId);

/// 标记会话为已读
///
/// 参数:
/// * `conversation_id` - 会话ID
///
/// 返回:
/// * `Result<()>` - 操作结果
Future<void> markSessionAsRead({required String conversationId}) => RustLib
    .instance
    .api
    .crateApiChatApiMarkSessionAsRead(conversationId: conversationId);

Future<void> markConversationAsRead({
  required FfiChatType chatType,
  required PlatformInt64 targetId,
}) => RustLib.instance.api.crateApiChatApiMarkConversationAsRead(
  chatType: chatType,
  targetId: targetId,
);

/// 批量标记会话为已读
///
/// 参数:
/// * `conversation_ids` - 会话ID列表
///
/// 返回:
/// * `Result<()>` - 操作结果
Future<void> batchMarkConversationAsRead({
  required List<(FfiChatType, PlatformInt64)> conversationIds,
}) => RustLib.instance.api.crateApiChatApiBatchMarkConversationAsRead(
  conversationIds: conversationIds,
);

/// 设置全局客户端消息流，用于向Flutter端发送通用事件通知
///
/// # 参数
///
/// * `sink` - 消息流接收器，用于向Flutter端发送消息
///
/// # 返回
///
/// * `Result<()>` - 操作结果
Stream<Rust2ClientMessagePayload> setClientMessageStream() =>
    RustLib.instance.api.crateApiChatApiSetClientMessageStream();

/// 设置会话置顶
///
/// 参数:
/// * `conversation_id` - 会话ID
/// * `is_top` - 是否置顶
///
/// 返回:
/// * `Result<()>` - 操作结果
Future<void> setConversationTop({
  required String conversationId,
  required bool isTop,
}) => RustLib.instance.api.crateApiChatApiSetConversationTop(
  conversationId: conversationId,
  isTop: isTop,
);

/// 设置会话归档状态
///
/// 参数:
/// * `conversation_id` - 会话ID
/// * `is_archive` - 是否归档 (2: 归档, 1: 未归档)
///
/// 返回:
/// * `Result<()>` - 操作结果
Future<void> setConversationArchive({
  required String conversationId,
  required int isArchive,
}) => RustLib.instance.api.crateApiChatApiSetConversationArchive(
  conversationId: conversationId,
  isArchive: isArchive,
);

/// 获取归档会话的分组标题
///
/// 返回:
/// * `Result<Option<FfiConversation>>` - 归档会话的分组标题，如果没有归档会话则返回None
Future<FfiConversation?> getArchivedGroup() =>
    RustLib.instance.api.crateApiChatApiGetArchivedGroup();

/// 获取已归档会话列表
///
/// 返回:
/// * `Result<Vec<FfiConversation>>` - 已归档会话列表
Future<List<FfiConversation>> getArchivedConversations() =>
    RustLib.instance.api.crateApiChatApiGetArchivedConversations();

/// 删除会话
///
/// 参数:
/// * `conversation_id` - 会话ID
///
/// 返回:
/// * `Result<()>` - 操作结果
Future<void> deleteConversation({
  required FfiChatType chatType,
  required PlatformInt64 targetId,
}) => RustLib.instance.api.crateApiChatApiDeleteConversation(
  chatType: chatType,
  targetId: targetId,
);

/// 批量删除会话
///
/// 参数:
/// * `conversation_ids` - 会话ID列表
///
/// 返回:
/// * `Result<()>` - 操作结果
Future<void> batchDeleteConversations({
  required List<(FfiChatType, PlatformInt64)> conversationIds,
}) => RustLib.instance.api.crateApiChatApiBatchDeleteConversations(
  conversationIds: conversationIds,
);

/// 分发消息结构
class Rust2ClientMessagePayload {
  /// 消息类型
  final Rust2ClientMessageType messageType;

  /// 消息数据 (JSON字符串)
  final String payload;

  const Rust2ClientMessagePayload({
    required this.messageType,
    required this.payload,
  });

  @override
  int get hashCode => messageType.hashCode ^ payload.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Rust2ClientMessagePayload &&
          runtimeType == other.runtimeType &&
          messageType == other.messageType &&
          payload == other.payload;
}

/// Flutter消息类型枚举
enum Rust2ClientMessageType {
  /// 会话列表更新
  conversationListUpdate,

  /// 会话详情更新
  conversationDetailUpdate,

  /// 用户状态更新
  userStatusUpdate,

  /// 连接状态
  /// 认证开始
  startAuthentication,

  /// 连接完成
  connectionComplete,

  /// 连接失败
  connectionFailed,

  /// 文件下载相关
  /// 文件下载进度更新
  fileDownloadProgress,

  /// 文件下载完成
  fileDownloadComplete,

  /// 批量文件下载状态
  batchFileDownloadStatus,
}
