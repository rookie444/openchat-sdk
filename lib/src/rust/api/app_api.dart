// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'model/chat.dart';
import 'model/client_info.dart';
import 'model/ffi_init_params.dart';
import 'model/ffi_message_common.dart';
import 'model/login.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// 初始化Rust应用
///
/// # Arguments
/// * `client_info` - 客户端信息
/// * `db_path` - 数据库文件路径，应该是设备上的完整路径
///
/// # Returns
/// * `Result<bool>` - 初始化结果
Future<bool> initApp({
  required FfiClientInfo clientInfo,
  required FfiInitParams initParams,
  required PlatformInt64 uid,
}) => RustLib.instance.api.crateApiAppApiInitApp(
  clientInfo: clientInfo,
  initParams: initParams,
  uid: uid,
);

Future<void> updateUserConfig({
  required PlatformInt64 uid,
  required String sessionId,
  FfiUrlInfo? urls,
}) => RustLib.instance.api.crateApiAppApiUpdateUserConfig(
  uid: uid,
  sessionId: sessionId,
  urls: urls,
);

/// 初始化表数据
Future<void> initTableData() =>
    RustLib.instance.api.crateApiAppApiInitTableData();

/// 初始化TCP客户端连接
Future<void> startTcpClientConnection() =>
    RustLib.instance.api.crateApiAppApiStartTcpClientConnection();

/// 更新TCP客户端配置
///
/// 用于动态更新TCP客户端的配置，如服务器地址、端口等
Future<void> updateTcpClientConfig({
  String? serverAddr,
  int? serverPort,
  PlatformInt64? uid,
}) => RustLib.instance.api.crateApiAppApiUpdateTcpClientConfig(
  serverAddr: serverAddr,
  serverPort: serverPort,
  uid: uid,
);

/// 关闭TCP客户端连接
///
/// # Returns
/// * `Result<()>` - 关闭结果
Future<void> stopTcpClient() =>
    RustLib.instance.api.crateApiAppApiStopTcpClient();

/// 初始化日志系统
///
/// # Arguments
/// * `level` - 日志级别：verbose, debug, info, warning, error, fatal
/// * `stream` - 可选的日志流，用于接收日志消息并发送到Flutter
///
/// # Returns
/// * `Result<(), anyhow::Error>` - 初始化结果
Stream<String> initLogger() => RustLib.instance.api.crateApiAppApiInitLogger();

/// 设置日志级别
///
/// # Arguments
/// * `level` - 日志级别：verbose, debug, info, warning, error, fatal
Future<void> setLoggerLevel({required String level}) =>
    RustLib.instance.api.crateApiAppApiSetLoggerLevel(level: level);

/// 设置消息推送类型
///
/// # Arguments
/// * `push_type` - 推送类型: 0=无, 1=会话列表, 2=会话详情
/// * `conversation_id` - 当前会话ID (仅当push_type=2时需要)
Future<void> setPushNotificationType({
  required FfiPushNotificationType pushType,
  FfiChatType? chatType,
  PlatformInt64? targetId,
}) => RustLib.instance.api.crateApiAppApiSetPushNotificationType(
  pushType: pushType,
  chatType: chatType,
  targetId: targetId,
);
