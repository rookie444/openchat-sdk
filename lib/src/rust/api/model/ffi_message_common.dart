// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
part '../../../../generated/src/rust/api/model/ffi_message_common.freezed.dart';
part '../../../../generated/src/rust/api/model/ffi_message_common.g.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `assert_receiver_is_total_eq`, `clone`, `clone`, `clone`, `clone`, `clone`, `eq`, `eq`, `eq`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `hash`, `try_from_primitive`, `try_from_primitive`, `try_from_primitive`, `try_from`, `try_from`, `try_from`

/// 会话类型枚举
enum FfiChatType {
  single,
  group,
  channel;

  static Future<FfiChatType> fromI32({required int value}) => RustLib
      .instance
      .api
      .crateApiModelFfiMessageCommonFfiChatTypeFromI32(value: value);

  Future<int> toI32() => RustLib.instance.api
      .crateApiModelFfiMessageCommonFfiChatTypeToI32(that: this);
}

@freezed
class FfiCommonMessageModel with _$FfiCommonMessageModel {
  const FfiCommonMessageModel._();
  const factory FfiCommonMessageModel({
    required PlatformInt64 flag,
    required PlatformInt64 msgId,
    required PlatformInt64 targetId,
    required FfiChatType chatType,
    required String conversationId,
    required FfiMsgType msgType,
    required PlatformInt64 sendTime,
    required PlatformInt64 serverReceiveTime,
    required PlatformInt64 receiveTime,
  }) = _FfiCommonMessageModel;
  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  /// 用于创建一个公共的发送对象
  static Future<FfiCommonMessageModel> newInstance({
    required PlatformInt64 targetId,
    required FfiChatType chatType,
    required FfiMsgType msgType,
  }) => RustLib.instance.api
      .crateApiModelFfiMessageCommonFfiCommonMessageModelNew(
        targetId: targetId,
        chatType: chatType,
        msgType: msgType,
      );

  factory FfiCommonMessageModel.fromJson(Map<String, dynamic> json) =>
      _$FfiCommonMessageModelFromJson(json);
}

/// 消息状态枚举
enum FfiMsgStatus { sending, sent, failed, received, read }

/// 消息类型枚举
enum FfiMsgType {
  text,

  ///文本
  image,

  ///图片
  audio,

  ///音频
  video,

  ///视频
  location,

  ///位置
  card,

  ///名片
  system,

  ///系统消息
  file,

  /// 文件
  notice,

  /// 群公告
  image2,

  /// gif动图、表情
  packet,

  /// 红包
  html,

  /// 富文本消息，机器人消息占用
  dice,
  transfer,
  transfer2,

  /// 聊天转账结果（领取、主动退回）
  packet2,

  /// 红包结果消息类型（领取、退款）
  html2,

  /// 公告富文本消息
  medias,

  /// 多图/视频+一个文字
  game,

  /// 动画游戏
  groupEvent,

  /// 群事件消息
  unknown;

  static Future<FfiMsgType> default_() =>
      RustLib.instance.api.crateApiModelFfiMessageCommonFfiMsgTypeDefault();

  static Future<FfiMsgType> fromI32({required int value}) => RustLib
      .instance
      .api
      .crateApiModelFfiMessageCommonFfiMsgTypeFromI32(value: value);

  Future<int> toI32() => RustLib.instance.api
      .crateApiModelFfiMessageCommonFfiMsgTypeToI32(that: this);
}

@freezed
class FfiReferenceObj with _$FfiReferenceObj {
  const FfiReferenceObj._();
  const factory FfiReferenceObj({
    required PlatformInt64 msgId,
    required String content,
    required FfiMsgType msgType,
    required PlatformInt64 uid,
    required String nickname,
  }) = _FfiReferenceObj;
  static Future<FfiReferenceObj> default_() =>
      RustLib.instance.api
          .crateApiModelFfiMessageCommonFfiReferenceObjDefault();

  factory FfiReferenceObj.fromJson(Map<String, dynamic> json) =>
      _$FfiReferenceObjFromJson(json);
}
