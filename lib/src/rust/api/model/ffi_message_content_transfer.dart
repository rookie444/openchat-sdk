// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import 'ffi_message_common.dart';
import 'ffi_message_content.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
part '../../../../generated/src/rust/api/model/ffi_message_content_transfer.freezed.dart';
part '../../../../generated/src/rust/api/model/ffi_message_content_transfer.g.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `fmt`

/// 文本消息内容
@freezed
class FfiChatTransferMessageContent with _$FfiChatTransferMessageContent {
  const FfiChatTransferMessageContent._();
  const factory FfiChatTransferMessageContent({
    required String transferNo,
    required String count,
    required String coinName,
    required int status,
    required PlatformInt64 expiredTime,
    required PlatformInt64 receiverId,
    required String receiverName,
    required PlatformInt64 issuerUid,
    required String issuerName,
    required String issuerIcon,
    required String remark,
    required int plusOneWithhold,
  }) = _FfiChatTransferMessageContent;
  static Future<FfiChatTransferMessageContent> default_() =>
      RustLib.instance.api
          .crateApiModelFfiMessageContentTransferFfiChatTransferMessageContentDefault();

  Future<String> ffiToJsonString() => RustLib.instance.api
      .crateApiModelFfiMessageContentTransferFfiChatTransferMessageContentFfiToJsonString(
        that: this,
      );

  Future<Uint8List> ffiToProtoData({
    required String contentObj,
    FfiReferenceObj? ffiRefObj,
  }) => RustLib.instance.api
      .crateApiModelFfiMessageContentTransferFfiChatTransferMessageContentFfiToProtoData(
        that: this,
        contentObj: contentObj,
        ffiRefObj: ffiRefObj,
      );

  Future<FfiMsgType> getFfiSubMsgType() => RustLib.instance.api
      .crateApiModelFfiMessageContentTransferFfiChatTransferMessageContentGetFfiSubMsgType(
        that: this,
      );

  Future<void> jsonToFfi({
    required String uniKey,
    required String jsonStr,
  }) => RustLib.instance.api
      .crateApiModelFfiMessageContentTransferFfiChatTransferMessageContentJsonToFfi(
        that: this,
        uniKey: uniKey,
        jsonStr: jsonStr,
      );

  Future<(String, FfiReferenceObj?)> protoDecodeToJson({
    required List<int> content,
  }) => RustLib.instance.api
      .crateApiModelFfiMessageContentTransferFfiChatTransferMessageContentProtoDecodeToJson(
        that: this,
        content: content,
      );

  factory FfiChatTransferMessageContent.fromJson(Map<String, dynamic> json) =>
      _$FfiChatTransferMessageContentFromJson(json);
}
