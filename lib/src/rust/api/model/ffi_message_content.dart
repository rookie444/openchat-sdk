// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import 'ffi_message_common.dart';
import 'ffi_message_content_audio.dart';
import 'ffi_message_content_dice.dart';
import 'ffi_message_content_dynamic_image.dart';
import 'ffi_message_content_file.dart';
import 'ffi_message_content_game.dart';
import 'ffi_message_content_group_event.dart';
import 'ffi_message_content_html.dart';
import 'ffi_message_content_html2.dart';
import 'ffi_message_content_image.dart';
import 'ffi_message_content_location.dart';
import 'ffi_message_content_medias_caption.dart';
import 'ffi_message_content_name_card.dart';
import 'ffi_message_content_notice.dart';
import 'ffi_message_content_redpacket.dart';
import 'ffi_message_content_system.dart';
import 'ffi_message_content_text.dart';
import 'ffi_message_content_transfer.dart';
import 'ffi_message_content_unknown.dart';
import 'ffi_message_content_video.dart';
import 'ffi_message_model.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
part '../../../../generated/src/rust/api/model/ffi_message_content.freezed.dart';
part '../../../../generated/src/rust/api/model/ffi_message_content.g.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `fmt`, `fmt`, `fmt`

Future<ArcFfiMessageContentTrait> findProcesser({required int msgTypeVal}) =>
    RustLib.instance.api.crateApiModelFfiMessageContentFindProcesser(
      msgTypeVal: msgTypeVal,
    );

abstract class FfiMessageContentTrait {
  Future<String> ffiToJsonString();

  Future<Uint8List> ffiToProtoData({
    required String contentObj,
    FfiReferenceObj? ffiRefObj,
  });

  Future<FfiMsgType> getFfiSubMsgType();

  Future<void> jsonToFfi({required String uniKey, required String jsonStr});

  Future<(String, FfiReferenceObj?)> protoDecodeToJson({
    required List<int> content,
  });
}

@freezed
sealed class FfiMsgContent with _$FfiMsgContent {
  const FfiMsgContent._();

  const factory FfiMsgContent.text(FfiTextMessageContent field0) =
      FfiMsgContent_Text;
  const factory FfiMsgContent.image(FfiImageMessageContent field0) =
      FfiMsgContent_Image;
  const factory FfiMsgContent.image2(FfiDynamicImageMessageContent field0) =
      FfiMsgContent_Image2;
  const factory FfiMsgContent.audio(FfiAudioMessageContent field0) =
      FfiMsgContent_Audio;
  const factory FfiMsgContent.video(FfiVideoMessageContent field0) =
      FfiMsgContent_Video;
  const factory FfiMsgContent.file(FfiFileMessageContent field0) =
      FfiMsgContent_File;
  const factory FfiMsgContent.card(FfiNameCardMessageContent field0) =
      FfiMsgContent_Card;
  const factory FfiMsgContent.system(FfiSystemMessageContent field0) =
      FfiMsgContent_System;
  const factory FfiMsgContent.dice(FfiDiceMessageContent field0) =
      FfiMsgContent_Dice;
  const factory FfiMsgContent.notice(FfiNoticeMessageContent field0) =
      FfiMsgContent_Notice;
  const factory FfiMsgContent.location(FfiLocationMessageContent field0) =
      FfiMsgContent_Location;
  const factory FfiMsgContent.packet(FfiRedPacketMessageContent field0) =
      FfiMsgContent_Packet;
  const factory FfiMsgContent.transfer(FfiChatTransferMessageContent field0) =
      FfiMsgContent_Transfer;
  const factory FfiMsgContent.medias(FfiMediasCaptionMessageContent field0) =
      FfiMsgContent_Medias;
  const factory FfiMsgContent.game(FfiAnmatedMessageContent field0) =
      FfiMsgContent_Game;
  const factory FfiMsgContent.html(FfiHtmlMessageContent field0) =
      FfiMsgContent_Html;
  const factory FfiMsgContent.html2(FfiHtml2MessageContent field0) =
      FfiMsgContent_Html2;
  const factory FfiMsgContent.groupEvent(FfiGroupEventMessageContent field0) =
      FfiMsgContent_GroupEvent;
  const factory FfiMsgContent.unknown(FfiUnknownMessageContent field0) =
      FfiMsgContent_Unknown;

  factory FfiMsgContent.fromJson(Map<String, dynamic> json) =>
      _$FfiMsgContentFromJson(json);

  Future<ArcFfiMessageContentTrait> getContent() => RustLib.instance.api
      .crateApiModelFfiMessageContentFfiMsgContentGetContent(that: this);
}

class MessageError implements FrbException {
  final String message;

  const MessageError({required this.message});

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  static Future<MessageError> newInstance({required String msg}) => RustLib
      .instance
      .api
      .crateApiModelFfiMessageContentMessageErrorNew(msg: msg);

  @override
  int get hashCode => message.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is MessageError &&
          runtimeType == other.runtimeType &&
          message == other.message;
}
