// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import 'ffi_message_common.dart';
import 'ffi_message_content.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
part '../../../../generated/src/rust/api/model/ffi_message_content_name_card.freezed.dart';
part '../../../../generated/src/rust/api/model/ffi_message_content_name_card.g.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `fmt`

/// 文本消息内容
@freezed
class FfiNameCardMessageContent with _$FfiNameCardMessageContent {
  const FfiNameCardMessageContent._();
  const factory FfiNameCardMessageContent({
    required PlatformInt64 uid,
    required String nickName,
    required String icon,
    required String identify,
  }) = _FfiNameCardMessageContent;
  static Future<FfiNameCardMessageContent> default_() =>
      RustLib.instance.api
          .crateApiModelFfiMessageContentNameCardFfiNameCardMessageContentDefault();

  Future<String> ffiToJsonString() => RustLib.instance.api
      .crateApiModelFfiMessageContentNameCardFfiNameCardMessageContentFfiToJsonString(
        that: this,
      );

  Future<Uint8List> ffiToProtoData({
    required String contentObj,
    FfiReferenceObj? ffiRefObj,
  }) => RustLib.instance.api
      .crateApiModelFfiMessageContentNameCardFfiNameCardMessageContentFfiToProtoData(
        that: this,
        contentObj: contentObj,
        ffiRefObj: ffiRefObj,
      );

  Future<FfiMsgType> getFfiSubMsgType() => RustLib.instance.api
      .crateApiModelFfiMessageContentNameCardFfiNameCardMessageContentGetFfiSubMsgType(
        that: this,
      );

  Future<void> jsonToFfi({
    required String uniKey,
    required String jsonStr,
  }) => RustLib.instance.api
      .crateApiModelFfiMessageContentNameCardFfiNameCardMessageContentJsonToFfi(
        that: this,
        uniKey: uniKey,
        jsonStr: jsonStr,
      );

  Future<(String, FfiReferenceObj?)> protoDecodeToJson({
    required List<int> content,
  }) => RustLib.instance.api
      .crateApiModelFfiMessageContentNameCardFfiNameCardMessageContentProtoDecodeToJson(
        that: this,
        content: content,
      );

  factory FfiNameCardMessageContent.fromJson(Map<String, dynamic> json) =>
      _$FfiNameCardMessageContentFromJson(json);
}
