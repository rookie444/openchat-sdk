// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
part '../../../../generated/src/rust/api/model/ffi_emotion_model.freezed.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `assert_receiver_is_total_eq`, `clone`, `clone`, `clone`, `clone`, `clone`, `eq`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `hash`

/// 动画游戏配置模型（FFI）
@freezed
class FfiAnimatedGameConfig with _$FfiAnimatedGameConfig {
  const factory FfiAnimatedGameConfig({
    required int gameId,
    required String gameName,
    required bool isDisplay,
    required String downUrl,
    required String iconName,
    required String startGifName,
    required String repeatGifName,
    required String resultGifName,
    required double width,
    required double height,
  }) = _FfiAnimatedGameConfig;
}

/// FFI表情包基础信息
class FfiEmoticonBase {
  /// 表情类型
  final FfiEmotionInfoType emotionType;

  /// 图片名称
  final String imgName;

  /// 游戏ID（可选）
  final int? gameId;

  /// 游戏图标路径
  final String gameIconPath;

  /// 表情包URL链接
  final String emoticonUrl;

  /// 表情包ID
  final PlatformInt64 emoticonId;

  /// 表情包宽度
  final double width;

  /// 表情包高度
  final double height;

  const FfiEmoticonBase({
    required this.emotionType,
    required this.imgName,
    this.gameId,
    required this.gameIconPath,
    required this.emoticonUrl,
    required this.emoticonId,
    required this.width,
    required this.height,
  });

  @override
  int get hashCode =>
      emotionType.hashCode ^
      imgName.hashCode ^
      gameId.hashCode ^
      gameIconPath.hashCode ^
      emoticonUrl.hashCode ^
      emoticonId.hashCode ^
      width.hashCode ^
      height.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is FfiEmoticonBase &&
          runtimeType == other.runtimeType &&
          emotionType == other.emotionType &&
          imgName == other.imgName &&
          gameId == other.gameId &&
          gameIconPath == other.gameIconPath &&
          emoticonUrl == other.emoticonUrl &&
          emoticonId == other.emoticonId &&
          width == other.width &&
          height == other.height;
}

/// FFI表情列表回调结果
class FfiEmoticonListResult {
  /// 表情包列表
  final List<FfiEmoticonBase> emoticons;

  /// 表情包总数量
  final int count;

  /// 是否来自缓存
  final bool fromCache;

  /// 最后更新时间戳
  final BigInt lastUpdateTime;

  const FfiEmoticonListResult({
    required this.emoticons,
    required this.count,
    required this.fromCache,
    required this.lastUpdateTime,
  });

  @override
  int get hashCode =>
      emoticons.hashCode ^
      count.hashCode ^
      fromCache.hashCode ^
      lastUpdateTime.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is FfiEmoticonListResult &&
          runtimeType == other.runtimeType &&
          emoticons == other.emoticons &&
          count == other.count &&
          fromCache == other.fromCache &&
          lastUpdateTime == other.lastUpdateTime;
}

/// FFI表情信息类型枚举
enum FfiEmotionInfoType {
  /// 普通表情
  normal,

  /// 添加表情
  add,

  /// 骰子
  dice,

  /// 动画游戏
  animatedGame,
}

/// FFI获取表情包列表响应
class FfiGetEmoticonResponse {
  /// 表情包列表
  final List<FfiEmoticonBase> emoticons;

  /// 表情包总数量
  final int count;

  /// 是否来自缓存
  final bool fromCache;

  const FfiGetEmoticonResponse({
    required this.emoticons,
    required this.count,
    required this.fromCache,
  });

  @override
  int get hashCode => emoticons.hashCode ^ count.hashCode ^ fromCache.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is FfiGetEmoticonResponse &&
          runtimeType == other.runtimeType &&
          emoticons == other.emoticons &&
          count == other.count &&
          fromCache == other.fromCache;
}
